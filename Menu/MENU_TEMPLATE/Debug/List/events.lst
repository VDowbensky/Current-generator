###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.12.1.50500 for Atmel AVR        11/Feb/2015  02:09:26 #
# Copyright 1996-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  G:\Work\Projects\ATMEL\IAR\C\MENU_TEMPLATE\events.c      #
#    Command line =  --string_literals_in_flash G:\Work\Projects\ATMEL\IAR\C\ #
#                    MENU_TEMPLATE\events.c --cpu=m32a -ms -o                 #
#                    G:\Work\Projects\ATMEL\IAR\C\MENU_TEMPLATE\Debug\Obj\    #
#                    -lCN G:\Work\Projects\ATMEL\IAR\C\MENU_TEMPLATE\Debug\Li #
#                    st\ --initializers_in_flash --debug                      #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 1024 --clib    #
#                    -Ohz                                                     #
#    List file    =  G:\Work\Projects\ATMEL\IAR\C\MENU_TEMPLATE\Debug\List\ev #
#                    ents.lst                                                 #
#    Object file  =  G:\Work\Projects\ATMEL\IAR\C\MENU_TEMPLATE\Debug\Obj\eve #
#                    nts.r90                                                  #
#                                                                             #
#                                                                             #
###############################################################################

G:\Work\Projects\ATMEL\IAR\C\MENU_TEMPLATE\events.c
      1          //========================================================================
      2          #include "events.h"
      3          //========================================================================
      4          
      5          //========================================================================

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          u08 Events [MAX_ID_EVENTS];
   \                     Events:
   \   00000000                      DS8 5
      7          //========================================================================
      8          
      9          //========================================================================

   \                                 In  segment CODE, align 2, keep-with-next
     10          void Init_Events (void)
   \                     Init_Events:
     11          {
     12             u08 i = 0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   E020               LDI     R18, 0
     13          
     14             while (i < MAX_ID_EVENTS)
     15             {
     16                Events [i++] = 0;
   \                     ??Init_Events_0:
   \   00000004   E0F0               LDI     R31, 0
   \   00000006   2FE0               MOV     R30, R16
   \   00000008   ....               SUBI    R30, LOW((-(Events) & 0xFFFF))
   \   0000000A   ....               SBCI    R31, (-(Events) & 0xFFFF) >> 8
   \   0000000C   8320               ST      Z, R18
   \   0000000E   9503               INC     R16
     17             }
   \   00000010   3005               CPI     R16, 5
   \   00000012   F3C0               BRCS    ??Init_Events_0
     18          }
   \   00000014   9508               RET
     19          

   \                                 In  segment CODE, align 2, keep-with-next
     20          bool Get_Event (u08 event)
   \                     Get_Event:
     21          {
     22             if (Events [event] == 2)
   \   00000000   E010               LDI     R17, 0
   \   00000002   ....               LDI     R30, LOW(Events)
   \   00000004   ....               LDI     R31, (Events) >> 8
   \   00000006   0FE0               ADD     R30, R16
   \   00000008   1FF1               ADC     R31, R17
   \   0000000A   8100               LD      R16, Z
   \   0000000C   3002               CPI     R16, 2
   \   0000000E   F419               BRNE    ??Get_Event_0
     23             {
     24                Events [event] = 0;
   \   00000010   8310               ST      Z, R17
     25                return true;
   \   00000012   E001               LDI     R16, 1
   \   00000014   9508               RET
     26             }
     27             return false;
   \                     ??Get_Event_0:
   \   00000016   E000               LDI     R16, 0
   \   00000018   9508               RET
     28          }
     29          

   \                                 In  segment CODE, align 2, keep-with-next
     30          void Set_Event (u08 event, u08 status)
   \                     Set_Event:
     31          {
     32             if (Events [event] == 0)
   \   00000000   E030               LDI     R19, 0
   \   00000002   ....               LDI     R30, LOW(Events)
   \   00000004   ....               LDI     R31, (Events) >> 8
   \   00000006   0FE0               ADD     R30, R16
   \   00000008   1FF3               ADC     R31, R19
   \   0000000A   8100               LD      R16, Z
   \   0000000C   2300               TST     R16
   \   0000000E   F409               BRNE    ??Set_Event_0
     33                Events [event] = status;
   \   00000010   8310               ST      Z, R17
     34          }
   \                     ??Set_Event_0:
   \   00000012   9508               RET
     35          

   \                                 In  segment CODE, align 2, keep-with-next
     36          void Process_Events (void)
   \                     Process_Events:
     37          {
     38             u08 i = 0;
   \   00000000   E020               LDI     R18, 0
   \   00000002   E030               LDI     R19, 0
     39          
     40             while (i < MAX_ID_EVENTS)
     41             {
     42                if (Events [i] == 2)
   \                     ??Process_Events_0:
   \   00000004   ....               LDI     R30, LOW(Events)
   \   00000006   ....               LDI     R31, (Events) >> 8
   \   00000008   0FE2               ADD     R30, R18
   \   0000000A   1FF3               ADC     R31, R19
   \   0000000C   8100               LD      R16, Z
   \   0000000E   3002               CPI     R16, 2
   \   00000010   F411               BRNE    ??Process_Events_1
     43                   Events [i] = 0;
   \   00000012   8330               ST      Z, R19
   \   00000014   C004               RJMP    ??Process_Events_2
     44                if (Events [i] == 1)
   \                     ??Process_Events_1:
   \   00000016   3001               CPI     R16, 1
   \   00000018   F411               BRNE    ??Process_Events_2
     45                   Events [i] = 2;
   \   0000001A   E002               LDI     R16, 2
   \   0000001C   8300               ST      Z, R16
     46          
     47                i++;
   \                     ??Process_Events_2:
   \   0000001E   9523               INC     R18
     48             }
   \   00000020   3025               CPI     R18, 5
   \   00000022   F380               BRCS    ??Process_Events_0
     49          }
   \   00000024   9508               RET
     50          //========================================================================

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       0      2  Get_Event
       0      2  Init_Events
       0      2  Process_Events
       0      2  Set_Event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  Events
      26  Get_Event
      22  Init_Events
      38  Process_Events
      20  Set_Event
       6  -- Other

 
 106 bytes in segment CODE
   6 bytes in segment INITTAB
   5 bytes in segment NEAR_Z
 
 106 bytes of CODE memory (+ 6 bytes shared)
   5 bytes of DATA memory

Errors: none
Warnings: none
