###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.12.1.50500 for Atmel AVR        11/Feb/2015  02:09:28 #
# Copyright 1996-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  G:\Work\Projects\ATMEL\IAR\C\MENU_TEMPLATE\sys_timer.c   #
#    Command line =  --string_literals_in_flash G:\Work\Projects\ATMEL\IAR\C\ #
#                    MENU_TEMPLATE\sys_timer.c --cpu=m32a -ms -o              #
#                    G:\Work\Projects\ATMEL\IAR\C\MENU_TEMPLATE\Debug\Obj\    #
#                    -lCN G:\Work\Projects\ATMEL\IAR\C\MENU_TEMPLATE\Debug\Li #
#                    st\ --initializers_in_flash --debug                      #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 1024 --clib    #
#                    -Ohz                                                     #
#    List file    =  G:\Work\Projects\ATMEL\IAR\C\MENU_TEMPLATE\Debug\List\sy #
#                    s_timer.lst                                              #
#    Object file  =  G:\Work\Projects\ATMEL\IAR\C\MENU_TEMPLATE\Debug\Obj\sys #
#                    _timer.r90                                               #
#                                                                             #
#                                                                             #
###############################################################################

G:\Work\Projects\ATMEL\IAR\C\MENU_TEMPLATE\sys_timer.c
      1          //========================================================================
      2          #include "sys_timer.h"

   \                                 In  segment ABSOLUTE, at 0x52
   \   union <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5c
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1
      3          //========================================================================
      4          
      5          //========================================================================

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          u08 sys_tick;
   \                     sys_tick:
   \   00000000                      DS8 1
      7          //========================================================================
      8          
      9          //========================================================================
     10          #pragma vector = TIMER0_COMP_vect

   \                                 In  segment CODE, align 2, keep-with-next
     11          __interrupt void Timer0Comp(void)
   \                     Timer0Comp:
     12          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   B71F               IN      R17, 0x3F
     13          	ST_OCR += 250;
   \   0000000A   B70C               IN      R16, 0x3C
   \   0000000C   5006               SUBI    R16, 6
   \   0000000E   BF0C               OUT     0x3C, R16
     14          	sys_tick |= 1<<SYS_TICK_FLG;
   \   00000010   ....               LDI     R30, LOW(sys_tick)
   \   00000012   ....               LDI     R31, (sys_tick) >> 8
   \   00000014   8100               LD      R16, Z
   \   00000016   6001               ORI     R16, 0x01
   \   00000018   8300               ST      Z, R16
     15          }
   \   0000001A   BF1F               OUT     0x3F, R17
   \   0000001C   9109               LD      R16, Y+
   \   0000001E   9119               LD      R17, Y+
   \   00000020   91E9               LD      R30, Y+
   \   00000022   91F9               LD      R31, Y+
   \   00000024   9518               RETI
   \   00000026                      REQUIRE _A_OCR0
     16          //========================================================================
     17          
     18          //========================================================================

   \                                 In  segment CODE, align 2, keep-with-next
     19          void init_sys_timer (void)
   \                     init_sys_timer:
     20          {
     21          	sys_tick = 0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   9300....           STS     sys_tick, R16
     22          	ST_TCNT = 0;
   \   00000006   BF02               OUT     0x32, R16
     23          	ST_TIMSK |= 1<<ST_OCIE;
   \   00000008   B709               IN      R16, 0x39
   \   0000000A   6002               ORI     R16, 0x02
   \   0000000C   BF09               OUT     0x39, R16
     24          	ST_OCR = 250;
   \   0000000E   EF0A               LDI     R16, 250
   \   00000010   BF0C               OUT     0x3C, R16
     25          	ST_TCCR |= (1<<CS0) | (1<<CS1);
   \   00000012   B703               IN      R16, 0x33
   \   00000014   6003               ORI     R16, 0x03
   \   00000016   BF03               OUT     0x33, R16
     26          }
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_TCNT0
   \   0000001A                      REQUIRE _A_TIMSK
   \   0000001A                      REQUIRE _A_OCR0
   \   0000001A                      REQUIRE _A_TCCR0
     27          //------------------------------------------------------------------------
     28          
     29          //------------------------------------------------------------------------

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     30          struct tmrs_queue Timers_Queue [TMRS_QUANTITY];
   \                     Timers_Queue:
   \   00000000                      DS8 125
     31          

   \                                 In  segment CODE, align 2, keep-with-next
     32          void service_timers(void)
   \                     service_timers:
     33          {
     34          	if (sys_tick & (1<<SYS_TICK_FLG))
   \   00000000   ....               LDI     R30, LOW(sys_tick)
   \   00000002   ....               LDI     R31, (sys_tick) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   FF00               SBRS    R16, 0
   \   00000008   C019               RJMP    ??service_timers_0
     35          	{
     36          		sys_tick &= ~ (1<<SYS_TICK_FLG);
   \   0000000A   7F0E               ANDI    R16, 0xFE
   \   0000000C   8300               ST      Z, R16
     37          
     38          		struct tmrs_queue *p_tmrs_queue = Timers_Queue;
   \   0000000E   ....               LDI     R30, LOW(Timers_Queue)
   \   00000010   ....               LDI     R31, (Timers_Queue) >> 8
     39          
     40                for (p_tmrs_queue = Timers_Queue; p_tmrs_queue < Timers_Queue + TMRS_QUANTITY; p_tmrs_queue++)
   \   00000012   C010               RJMP    ??service_timers_1
     41                {
     42                   if (p_tmrs_queue -> tmr_flags & (1<<TMR_UNLOCK_FLG))
   \                     ??service_timers_2:
   \   00000014   8100               LD      R16, Z
   \   00000016   FF01               SBRS    R16, 1
   \   00000018   C00C               RJMP    ??service_timers_3
     43                   {
     44                      p_tmrs_queue -> tmr_cnt--;
   \   0000001A   8101               LDD     R16, Z+1
   \   0000001C   8112               LDD     R17, Z+2
   \   0000001E   5001               SUBI    R16, 1
   \   00000020   4010               SBCI    R17, 0
   \   00000022   8301               STD     Z+1, R16
   \   00000024   8312               STD     Z+2, R17
     45          
     46                      if (p_tmrs_queue -> tmr_cnt == 0)
   \   00000026   8101               LDD     R16, Z+1
   \   00000028   2B01               OR      R16, R17
   \   0000002A   F419               BRNE    ??service_timers_3
     47                         p_tmrs_queue -> tmr_flags |= (1<<TIME_OUT_FLG);
   \   0000002C   8100               LD      R16, Z
   \   0000002E   6008               ORI     R16, 0x08
   \   00000030   8300               ST      Z, R16
     48                   }
     49                }
   \                     ??service_timers_3:
   \   00000032   9635               ADIW    R31:R30, 5
   \                     ??service_timers_1:
   \   00000034   ....               LDI     R17, HIGH((Timers_Queue + 125))
   \   00000036   ....               CPI     R30, LOW((Timers_Queue + 125))
   \   00000038   07F1               CPC     R31, R17
   \   0000003A   F360               BRCS    ??service_timers_2
     50          	}
     51          }
   \                     ??service_timers_0:
   \   0000003C   9508               RET
     52          
     53          //------------------------------------------------------------------------
     54          
     55          //------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
     56          void set_timer(u08 num_tmr, u08 flags, u16 time)
   \                     set_timer:
     57          {
   \   00000000   2F61               MOV     R22, R17
     58          	struct tmrs_queue *p_tmrs_queue = Timers_Queue+num_tmr;
   \   00000002   ....               RCALL   ?Subroutine0
     59          	p_tmrs_queue -> tmr_flags = flags | (1<<TMR_UNLOCK_FLG);
   \                     ??CrossCallReturnLabel_0:
   \   00000004   6062               ORI     R22, 0x02
   \   00000006   8360               ST      Z, R22
     60          	p_tmrs_queue -> tmr_cnt = time;
   \   00000008   8321               STD     Z+1, R18
   \   0000000A   8332               STD     Z+2, R19
     61          }
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   2F40               MOV     R20, R16
   \   00000002   E050               LDI     R21, 0
   \   00000004   E005               LDI     R16, 5
   \   00000006   E010               LDI     R17, 0
   \   00000008   ........           CALL    ?S_EC_MUL_L02
   \   0000000C   ....               LDI     R30, LOW(Timers_Queue)
   \   0000000E   ....               LDI     R31, (Timers_Queue) >> 8
   \   00000010   0FE0               ADD     R30, R16
   \   00000012   1FF1               ADC     R31, R17
   \   00000014   9508               RET
     62          //------------------------------------------------------------------------
     63          
     64          //------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
     65          u08 wait(u08 num_tmr)
   \                     wait:
     66          
     67          {
     68          	struct tmrs_queue *p_tmrs_queue = Timers_Queue+num_tmr;
   \   00000000   ....               RCALL   ?Subroutine0
     69          	if(p_tmrs_queue -> tmr_flags & (1<<TIME_OUT_FLG))
   \                     ??CrossCallReturnLabel_1:
   \   00000002   8100               LD      R16, Z
   \   00000004   FF03               SBRS    R16, 3
   \   00000006   C004               RJMP    ??wait_0
     70          	{
     71          		p_tmrs_queue -> tmr_flags &= ~ (1<<TIME_OUT_FLG);
   \   00000008   7F07               ANDI    R16, 0xF7
   \   0000000A   8300               ST      Z, R16
     72          		return 1;
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   9508               RET
     73          	}
     74          		else
     75          		return 0;
   \                     ??wait_0:
   \   00000010   E000               LDI     R16, 0
   \   00000012   9508               RET
     76          }

   \                                 In  segment INTVEC, offset 0x28, root
   \                     `??Timer0Comp??INTVEC 40`:
   \   00000028   ........           JMP     Timer0Comp
     77          //========================================================================

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       4      2  Timer0Comp
       0      2  init_sys_timer
       0      2  service_timers
       0      4  set_timer
       0      4  wait


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??Timer0Comp??INTVEC 40
      22  ?Subroutine0
      38  Timer0Comp
     125  Timers_Queue
       1  _A_OCR0
       1  _A_TCCR0
       1  _A_TCNT0
       1  _A_TIMSK
      26  init_sys_timer
      62  service_timers
      14  set_timer
       1  sys_tick
      20  wait
       6  -- Other

 
   4 bytes in segment ABSOLUTE
 182 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
 126 bytes in segment NEAR_Z
 
 182 bytes of CODE memory (+ 10 bytes shared)
 126 bytes of DATA memory (+  4 bytes shared)

Errors: none
Warnings: none
